1，首先Profile 是 Spring 对不同环境提供不同配置功能的支持，可以通过激活、指定参数等方式快速切换环境。
   如：开发环境、测试环境、生产环境使用不同的配置。

2，怎么使用Profile功能呢？
   第一种方式：properties文件的方式：多Profile文件
       不同的环境提供不同的配置文件，格式为：application-{profile}.properties
       如：application-dev.properties
          application-test.properties
          application-prod.properties

       需要注意的是，默认还是使用 application.properties 或 application.yml 的。
       然后，我们需要在默认配置文件中”激活“当前使用什么环境的配置文件，激活方式为：
       spring.profiles.active=环境标识，如 spring.profiles.active=dev 表示激活开发环境，
       然后对应的配置文件就会生效了。

   第二种方式：使用多环境的 yml 配置文件，如下：
     默认的配置文件还是 application.yml，在该文件中配置多环境，其内容如下
     server:
        port: 8001
     spring:
        profiles:
            active: prod     //表示激活那个环境，如果不激活就使用当前默认的文档配置

     ---                 //三个中划线就相当于分割文档内容了，没出现一次，当前yml就多一个文档块
     server:
        port: 8002
     spring:
        profiles: dev    //给当前文档设置一个profile环境名称，表示是开发环境的配置

     ---
     server:
        port: 8003
     spring:
        profiles: prod   //给当前文档设置一个profile环境名称，表示是生产环境的配置


     对于激活方式，还可使用如下的方式：
       命令行参数方式：  --spring.profiles.active=dev
                  ide运行可以： Program arguments 配置 --spring.profiles.active=dev
                  命令运行则： java -jar xxx.jar --spring.profiles.active=dev
                  优先级高于”配置文件方式“
       配置文件方式： spring.profiles.active=dev    ,这种方式上面已经讲到了
       jvm参数（虚拟机参数）方式： -Dspring.profiles.active=dev
                   IDE在VM options 中配置 -Dspring.profiles.active=dev