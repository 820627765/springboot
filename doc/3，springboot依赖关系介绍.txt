1，分析 pom.xml 依赖-之父项目依赖时什么？
    导入了一个父项目：
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.9.RELEASE</version>
    </parent>
    这是springboot的所有starter（启动器）的父项目。
    maven的父项目一般都是用于做依赖的管理。springboot的starter的父项目也是如此。
    查看这个父项目，它也导入了一个父项目 spring-boot-dependencies
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>1.5.9.RELEASE</version>
        <relativePath>../../spring-boot-dependencies</relativePath>
    </parent>
    查看可知，这个父项目的pom.xml中定义了几乎所有开发中需要的依赖及对应的版本。如此我们的项目导入了 spring-boot-starter-parent
    或 spring-boot-dependencies 父项目后，就能直接使用这些依赖，而不需要去考虑应该用那个版本了。
    因此：spring-boot-dependencies 这个项目也称为 spring boot 应用的版本仲裁中心。如果特殊的依赖没有被这个版本仲裁中心管理就
    需要自己添加了。

2，场景启动器 spring-boot-starter
   帮我们导入了对应场景正常运行所需要的所有依赖。如 spring-boot-starter-web 就是web场景的启动器，依赖它就相当于依赖了web
   环境所需要的所有依赖。spring-boot-start-场景 可以看成这两部分。一下是一些常用的场景启动器
   spring-boot-starter-aop
   spring-boot-starter-cache
   spring-boot-starter-data-redis
   spring-boot-starter-activemq
   ...... 等等
   springboot 将所有的功能场景都抽取出来，做成一个个starters，只需要在项目里引入这写starter相关场景就会依赖到该场景正常运行
   所需要的所有依赖。

   - springboot 部分原生项目的依赖关系
      spring-boot-dependencies   依赖仲裁中心,定义了
        spring-boot-parent       springboot的父模块，依赖的父项目是 spring-boot-dependencies
            spring-boot-starters  包含所有的springboot场景启动器模块子项目，如下。依赖的父项目是 spring-boot-parent
                spring-boot-starter  场景启动器，父项目是 spring-boot-starters，是一个核心场景启动器，具备核心基础功能，
                                     其他场景启动器一般都会依赖该场景启动器
                spring-boot-starter-parent  场景启动器父模块，依赖的父项目是 spring-boot-dependencies
                spring-boot-starter-web     web场景启动器，依赖的父项目是   spring-boot-starter-parent
                spring-boot-starter-aop
                ......

2，项目中引入了web场景。
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>


